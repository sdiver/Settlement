<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="mapper.settlementManageMapper">
    <insert id="setUpCase" parameterType="map">
        INSERT INTO settlement_of_claims(case_code, case_create, case_update, case_region_id, case_address,
          case_time, case_reporter, case_cellphone_number, case_indentity, is_household, is_owner, case_forensics,
          case_status, case_upload_user)
        SELECT count(case_code)+ #{caseCode, jdbcType=INTEGER},
          sysdate(),sysdate(),#{caseRegionId, jdbcType=INTEGER},
          #{caseAddress, jdbcType=VARCHAR}, #{caseTime, jdbcType=DATE},
          #{caseReporter, jdbcType=VARCHAR},#{caseCellphoneNumber, jdbcType=INTEGER},
          #{caseIdentity ,jdbcType=VARCHAR}, #{isHousehold, jdbcType=INTEGER},
          #{isOwner, jdbcType=INTEGER}, #{caseForensics, jdbcType=VARCHAR},
          #{caseStatus, jdbcType=INTEGER}, #{caseUploadUser, jdbcType=INTEGER}
        FROM settlement_of_claims WHERE case_code like '${caseCodeTime}%'
    </insert>
    <insert id="forensicsUpload" parameterType="map">
        INSERT INTO forensics(create_time, update_time, case_forensics, forensics_id, forensics_type,
        lost_amount, lost_weight, photo_id, photo_url, photo_mini_url, forensics_context)
        select sysdate(), sysdate(), #{caseForensics, jdbcType=VARCHAR},IFNULL(sum(a.countA),1) countA,
          #{forensicsType, jdbcType=INTEGER}, #{lostAmount, jdbcType=INTEGER}, #{lostWeight, jdbcType=INTEGER},
          IFNULL(sum(a.countB),1) countB, #{photoUrl, jdbcType=VARCHAR}, #{photoMiniUrl, jdbcType=VARCHAR},
        #{forensicsContext, jdbcType=VARCHAR} from(
            select a.case_forensics,if(a.forensics_type=#{forensicsType, jdbctype=INTEGER},a.forensics_id,a.forensics_id + 1 ) countA,
              if(a.forensics_type=#{forensicsType, jdbctype=INTEGER},a.photo_id + 1, 1 ) countB from (
                SELECT case_forensics,forensics_id, forensics_type,count(photo_id) photo_id FROM forensics
                where case_forensics = #{caseForensics, jdbcType=VARCHAR}
                group by case_forensics, forensics_id, forensics_type
                order by forensics_id desc
                LIMIT 1
              )a
            )a
    </insert>
    <insert id="paySettle" parameterType="map">
        INSERT INTO close_case(forensics_id, amount_of_pay)
        VALUES (#{id, jdbcType=INTEGER}, #{amountOfPay, jdbcType=INTEGER})
    </insert>
    <insert id="forensicsUpdate">
        INSERT INTO forensics(create_time, update_time, case_forensics, forensics_id, forensics_type,
        lost_amount, lost_weight, photo_id, photo_url, photo_mini_url, forensics_context)
        select sysdate(), sysdate(), #{case_frensics, jdbcType=VARCHAR},#{forensics_id, jdbcType=INTEGER},
          #{forensicsType, jdbcType=INTEGER}, #{lostAmount, jdbcType=INTEGER}, #{lostWeight, jdbcType=INTEGER},
          count(photo_id)+1 photo_id, #{photoUrl, jdbcType=VARCHAR}, #{photoMiniUrl, jdbcType=VARCHAR},
        #{forensicsContext, jdbcType=VARCHAR}
        FROM forensics
        where case_forensics = #{case_frensics, jdbcType=VARCHAR}
           AND forensics_id = #{forensics_id, jdbcType=INTEGER}
    </insert>
    <update id="caseExpected" parameterType="map">
        UPDATE settlement_of_claims
        SET case_status = #{status, jdbcType = INTEGER},
            zip_url = #{zip_url, jdbcType = VARCHAR}
        WHERE case_code = #{caseCode, jdbcType = INTEGER}
    </update>
    <delete id="deleteForensics" parameterType="map">
        DELETE FROM forensics
        WHERE case_forensics = #{caseForensics, jdbcType = VARCHAR}
        and forensics_type = #{forensicsType, jdbcType = INTEGER}
    </delete>
    <delete id="deleteSettlement" parameterType="int">
        DELETE FROM settlement_of_claims
        WHERE case_code = #{caseCode, jdbcType=INTEGER}
    </delete>
    <delete id="deleteEveryForensics" parameterType="String">
        DELETE FROM forensics
        WHERE case_forensics = #{caseForensics, jdbcType=VARCHAR}
    </delete>
    <select id="listTown" resultType="model.region">
        SELECT id, town, village FROM region
        WHERE id like '%00'
    </select>
    <select id="listVillage" resultType="model.region">
        SELECT id, town, village FROM region
        WHERE id not like '%00'
    </select>
    <select id="searchByForensics" parameterType="String" resultType="int">
        SELECT case_code FROM settlement_of_claims WHERE case_forensics = #{caseForensics, jdbcType=VARCHAR}
    </select>
    <select id="searchByForensicsType" parameterType="int" resultType="java.lang.String">
      SELECT species FROM forensics_type WHERE id = #{forensicsType, jdbcType=INTEGER}
    </select>
    <select id="findByCaseCode" parameterType="int" resultType="java.lang.String">
        SELECT case_forensics FROM settlement_of_claims WHERE case_code = #{caseCode, jdbcType=INTEGER}
    </select>

</mapper>